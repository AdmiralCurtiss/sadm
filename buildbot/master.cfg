# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.changes.pb import PBChangeSource
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.status.html import WebStatus
from buildbot.status.web.auth import BasicAuth
from buildbot.status.web.authz import Authz
from buildbot.status.words import IRC
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.schedulers.basic import AnyBranchScheduler

class GitNoBranch(Git):
    """Monkey patch for stupid --branch and fetch behavior."""

    def _dovccmd(self, cmd, *a, **kw):
        newcmd = []
        branch = False
        for item in cmd:
            if branch:
                branch = False
            else:
                if item == '--branch':
                    branch = True
                elif item == 'fetch':
                    newcmd.append(item)
                    break
                else:
                    newcmd.append(item)
        return Git._dovccmd(self, newcmd, *a, **kw)

class MyMasterShellCommand(MasterShellCommand):
    """Monkey patch to render properties inside the environment."""

    def start(self):
        _env = self.env
        self.env = self.build.render(self.env)
        ret = MasterShellCommand.start(self)
        self.env = _env
        return ret

def make_dolphin_win_build(build_type, arch):
    msarch = "Win32" if arch == "x86" else "x64"
    f = BuildFactory()

    f.addStep(GitNoBranch(repourl="https://code.google.com/p/dolphin-emu/",
                          progress=True, mode="incremental"))

    branch = WithProperties("%s", "branchname")
    f.addStep(ShellCommand(command=["msbuild.exe", "/p:Platform=%s" % msarch,
                                    "/p:Configuration=%s" % build_type],
                           env={ "DOLPHIN_BRANCH": branch },
                           workdir="build/Source",
                           description="building",
                           descriptionDone="build",
                           haltOnFailure=True))

    build_descr = WithProperties("%s-%s", "branchname", "shortrev")
    f.addStep(ShellCommand(command=["C:\\scripts\\storesymbols.bat", "Binary\\%s\\Dolphin.pdb" % msarch,
                                    "Dolphin %s" % arch, build_descr],
                           logEnviron=False,
                           description="extracting symbols",
                           descriptionDone="symbols extraction"))

    f.addStep(ShellCommand(command=["xcopy", "Binary\\%s" % msarch,
                                    "Dolphin-%s" % arch, "/S", "/I"],
                           logEnviron=False,
                           description="copying output",
                           descriptionDone="output copy"))

    f.addStep(ShellCommand(command=["del", "Dolphin-%s\\Dolphin.pdb" % arch,
                                    "Dolphin-%s\\DSPTool.pdb" % arch,
                                    "Dolphin-%s\\Dolphin.lib" % arch,
                                    "Dolphin-%s\\Dolphin.exp" % arch],
                           logEnviron=False,
                           description="purging pdb",
                           descriptionDone="pdb purge"))

    out_filename = WithProperties("Dolphin-%%s-%%s-%s.7z" % arch, "branchname", "shortrev")
    f.addStep(ShellCommand(command=["7z", "a", "-r", out_filename,
                                    "Dolphin-%s" % arch],
                           logEnviron=False,
                           description="compressing",
                           descriptionDone="compression"))
    master_filename = WithProperties("/srv/http/dl/builds/dolphin-%%s-%%s-%s.7z" % arch, "branchname", "shortrev")
    url = WithProperties("http://dl.dolphin-emu.org/builds/dolphin-%%s-%%s-%s.7z" % arch, "branchname", "shortrev")
    f.addStep(FileUpload(slavesrc=out_filename, masterdest=master_filename,
                         url=url, keepstamp=True, mode=0644))

    f.addStep(ShellCommand(command=["del", "/F", "/S", "/Q", out_filename],
                           logEnviron=False,
                           description="cleaning up files",
                           descriptionDone="cleanup files"))

    f.addStep(MyMasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                   env={
                                       "BRANCH": WithProperties("%s", "branchname"),
                                       "SHORTREV": WithProperties("%s", "shortrev"),
                                       "HASH": WithProperties("%s", "revision"),
                                       "AUTHOR": WithProperties("%s", "author"),
                                       "DESCRIPTION": WithProperties("%s", "description"),
                                       "BUILD_TYPE": "win32" if arch == "x86" else "win64",
                                       "BUILD_URL": url
                                   },
                                   description="notifying website",
                                   descriptionDone="website notice"))

    f.addStep(ShellCommand(command=["rmdir", "/S", "/Q", "Dolphin-%s" % arch],
                           logEnviron=False,
                           description="cleaning up dirs",
                           descriptionDone="cleanup dirs"))

    return f

def make_dolphin_osx_build():
    f = BuildFactory()

    f.addStep(GitNoBranch(repourl="https://code.google.com/p/dolphin-emu/",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    f.addStep(ShellCommand(command=["cmake", ".."],
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(ShellCommand(command=["make", "-j3"],
                           workdir="build/build",
                           description="building",
                           descriptionDone="build",
                           haltOnFailure=True))

    f.addStep(ShellCommand(command=["hdiutil", "create", "dolphin.dmg",
                                    "-srcfolder", "Binaries/", "-ov"],
                           workdir="build/build",
                           logEnviron=False,
                           description="packaging",
                           descriptionDone="package"))

    master_filename = WithProperties("/srv/dolphin/dl/builds/dolphin-%s-%s.dmg", "branchname", "shortrev")
    url = WithProperties("http://dl.dolphin-emu.org/builds/dolphin-%s-%s.dmg", "branchname", "shortrev")
    f.addStep(FileUpload(slavesrc="build/dolphin.dmg", masterdest=master_filename,
                         url=url, keepstamp=True, mode=0644))

    f.addStep(MyMasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                   env={
                                       "BRANCH": WithProperties("%s", "branchname"),
                                       "SHORTREV": WithProperties("%s", "shortrev"),
                                       "HASH": WithProperties("%s", "revision"),
                                       "AUTHOR": WithProperties("%s", "author"),
                                       "DESCRIPTION": WithProperties("%s", "description"),
                                       "BUILD_TYPE": "osx",
                                       "BUILD_URL": url
                                   },
                                   description="notifying website",
                                   descriptionDone="website notice"))

    return f

BuildmasterConfig = {
    'title': 'Dolphin Emulator',
    'titleURL': 'http://code.google.com/p/dolphin-emu/',
    'buildbotURL': 'http://builds.delroth.net/',

    'slaves': [
        BuildSlave("windows", "win-password"),
        BuildSlave("osx-lion", "osx-password"),
    ],
    'slavePortnum': 9989,

    'change_source': [
        PBChangeSource(user="dolphin", passwd="chg-password"),
    ],

    'schedulers': [
        AnyBranchScheduler(name="all", builderNames=[
                               "release-win-x86",
                               "release-win-x64",
                               "release-osx-x64",
                           ], treeStableTimer=None),
    ],

    'builders': [
        BuilderConfig(name="release-win-x86", slavenames=["windows"],
                      factory=make_dolphin_win_build("Release", "x86")),
        BuilderConfig(name="release-win-x64", slavenames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64")),
        BuilderConfig(name="release-osx-x64", slavenames=["osx-lion"],
                      factory=make_dolphin_osx_build()),
    ],

    'status': [
        WebStatus(http_port=8010, authz=Authz(
            auth=BasicAuth([("dolphin", "auth-password")]),
            forceBuild="auth",
            forceAllBuilds="auth",
            pingBuilder="auth",
            gracefulShutdown="auth",
            stopBuild="auth",
            stopAllBuilds="auth",
            cancelPendingBuild="auth",
            stopChange="auth",
            cleanShutdown="auth"
        )),

        IRC("irc.efnet.nl", "DBuildBot", channels=[
                { "channel": "#dolphin-builds" },
            ], notify_events={
                "finished": True,
                "exception": True,
                "successToFailure": True,
                "failureToSuccess": True,
            })
    ],

    'db': {
        'db_url': 'sqlite:///state.sqlite',
    }
}
